/**
 * GCode file format exporter for p5.embroider
 * 
 * This module provides functions for exporting embroidery data to the GCode file format.
 */

import p5embroider from '../../core/main';

/**
 * GCodeWriter class for writing GCode files
 */
class GCodeWriter {
  /**
   * Create a new GCodeWriter
   */
  constructor() {
    this.lines = [];
    this.currentZ = 0;
    this.feedRate = 1000; // Default feed rate
    this.penUpZ = 5; // Z position when pen is up
    this.penDownZ = 0; // Z position when pen is down
  }

  /**
   * Add a comment to the GCode
   * @param {string} comment - The comment to add
   */
  addComment(comment) {
    this.lines.push(`; ${comment}`);
  }

  /**
   * Add a G-code command
   * @param {string} command - The G-code command
   */
  addCommand(command) {
    this.lines.push(command);
  }

  /**
   * Move to a position
   * @param {number} x - X coordinate
   * @param {number} y - Y coordinate
   * @param {number} z - Z coordinate (optional)
   */
  moveTo(x, y, z = null) {
    let command = `G1 X${x.toFixed(2)} Y${y.toFixed(2)}`;
    
    if (z !== null) {
      command += ` Z${z.toFixed(2)}`;
      this.currentZ = z;
    }
    
    command += ` F${this.feedRate}`;
    
    this.lines.push(command);
  }

  /**
   * Pen up (move Z to up position)
   */
  penUp() {
    if (this.currentZ !== this.penUpZ) {
      this.lines.push(`G1 Z${this.penUpZ.toFixed(2)} F${this.feedRate}`);
      this.currentZ = this.penUpZ;
    }
  }

  /**
   * Pen down (move Z to down position)
   */
  penDown() {
    if (this.currentZ !== this.penDownZ) {
      this.lines.push(`G1 Z${this.penDownZ.toFixed(2)} F${this.feedRate}`);
      this.currentZ = this.penDownZ;
    }
  }

  /**
   * Set the feed rate
   * @param {number} feedRate - The feed rate
   */
  setFeedRate(feedRate) {
    this.feedRate = feedRate;
  }

  /**
   * Set the pen up/down positions
   * @param {number} upZ - Z position when pen is up
   * @param {number} downZ - Z position when pen is down
   */
  setPenPositions(upZ, downZ) {
    this.penUpZ = upZ;
    this.penDownZ = downZ;
  }

  /**
   * Generate the GCode file content
   * @returns {string} - GCode file content
   */
  generate() {
    // Add header
    const header = [
      '; Generated by p5.embroider',
      '; ' + new Date().toISOString(),
      'G21 ; Set units to millimeters',
      'G90 ; Use absolute coordinates',
      'G92 X0 Y0 Z0 ; Set current position as origin',
      `G1 Z${this.penUpZ.toFixed(2)} F${this.feedRate} ; Pen up`
    ];
    
    // Add footer
    const footer = [
      `G1 Z${this.penUpZ.toFixed(2)} F${this.feedRate} ; Pen up`,
      'G1 X0 Y0 F3000 ; Return to origin',
      'M84 ; Disable motors'
    ];
    
    // Combine all lines
    return [...header, ...this.lines, ...footer].join('\n');
  }
}

/**
 * Export stitch data to a GCode file
 * @param {Object} stitchData - Stitch data object
 * @param {Object} options - Export options
 * @returns {string} - GCode file content
 */
p5embroider.exportGCode = function(stitchData, options = {}) {
  // Default options
  const defaultOptions = {
    feedRate: 1000,
    penUpZ: 5,
    penDownZ: 0,
    scale: 1,
    flipY: true // Flip Y coordinates (common for CNC machines)
  };
  
  // Merge options
  const exportOptions = { ...defaultOptions, ...options };
  
  // Create a new GCode writer
  const writer = new GCodeWriter();
  
  // Set feed rate and pen positions
  writer.setFeedRate(exportOptions.feedRate);
  writer.setPenPositions(exportOptions.penUpZ, exportOptions.penDownZ);
  
  // Add header comment
  writer.addComment(`Embroidery design with ${stitchData.stitchCount} stitches and ${stitchData.threads.length} threads`);
  
  // Process each thread
  for (let t = 0; t < stitchData.threads.length; t++) {
    const thread = stitchData.threads[t];
    
    // Add thread comment
    const color = thread.color;
    writer.addComment(`Thread #${t + 1}: RGB(${color.r}, ${color.g}, ${color.b})`);
    
    // Process stitches
    for (let i = 0; i < thread.stitches.length; i++) {
      const stitch = thread.stitches[i];
      
      // Scale coordinates
      const x = stitch.x * exportOptions.scale;
      // Flip Y if needed
      const y = exportOptions.flipY ? -stitch.y * exportOptions.scale : stitch.y * exportOptions.scale;
      
      if (i === 0 || stitch.jump) {
        // Move to position with pen up
        writer.penUp();
        writer.moveTo(x, y);
      } else {
        // Move to position with pen down
        writer.penDown();
        writer.moveTo(x, y);
      }
    }
    
    // Pen up at the end of the thread
    writer.penUp();
  }
  
  // Generate the GCode
  return writer.generate();
};

// Attach the GCodeWriter class to p5embroider
p5embroider.GCodeWriter = GCodeWriter;

export default p5embroider; 