let svgInput;
let svgParts = []; // Array of SVG part objects

// SVG Presets with colored elements
const presets = {

    1:`<?xml version="1.0" encoding="UTF-8"?>
    <svg id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 470.39 1300.91">
      <defs>
        <style>
          .cls-1 {
            fill: none;
            stroke: #000;
            stroke-linejoin: round;
          }
        </style>
      </defs>
      <path d="M219.53,340.99c15.83-3.84,49,4.74,64,10,32.27,2.44,58.27-13.17,65-46.01,3.52-39.32-17.67-50.77-44-73-8.45-14.63-21.07-37.76-38-44-26.23-11.25-62.84-1.72-81,20-12.67,29.3-45.76,39.56-57,69-3.83,19.37-2.55,32.69,5,51,5.48,9.46,23.14,18.49,33,22,15.05,2.53,38.76-5.27,53-9Z"/>
      <path d="M419.53,188.99c2.07-26.72-10.93-41.68-38-41-22.61,5.07-39.89,27.93-44,50-3.66,40.88,27.97,57.04,61,35,11.15-10.36,20.38-28.67,21-44Z"/>
      <path d="M138.53,194.99c-3.38-16.73-14.64-37.75-31-45-19.48-2.56-32.02-4.42-43,15-10.53,28.19,5.71,67.5,36,75,0,0,20-2,20-2,14.2-10.89,23.36-24.55,18-43Z"/>
      <path d="M174.53,62.99c-25.14,5.81-28.1,23.17-34,45-3.85,31.43,14.8,71.59,51,69,58.84-11.69,41.41-119.34-17-114"/>
      <path d="M306.53,58.99c-30.53-2.7-48.64,28.33-55,54-3.39,25.39,5.23,52.31,32,60,60.9,7.76,80-97.36,23-114Z"/>
      <path class="cls-1" d="M459.25,1300.9c-7.13-253.24-65.36-677.54-56.02-931,9.46-50.12,45.96-99.68,62.02-147,8.38-35.87,7.58-82.88-21.01-110-11.91-13.96-38.93-18.24-56-20-.24-37.6-25.4-79.92-63-90-28.35-6.84-63.62.85-82.68,24.05h0c-29.57-32.73-82.65-33.38-116-6-20.87,16.94-33.56,47.46-34,74-32.5-6.5-64.95,21.3-78,49-19.56,44.39,7.67,103.2,27,143C86.81,345.61-2.39,1212.39.57,1299.94"/>
    </svg>`,
    2: `<svg width="100" height="100" xmlns="http://www.w3.org/2000/svg">
    <rect x="10" y="10" width="80" height="80" fill="#ff6b6b" stroke="#4ecdc4" stroke-width="2"/>
    <circle cx="50" cy="50" r="25" fill="#45b7d1" stroke="#f7dc6f" stroke-width="3"/>
  </svg>`,
    3: `<svg width="100" height="100" xmlns="http://www.w3.org/2000/svg">
    <polygon points="50,10 90,80 10,80" fill="#f39c12" stroke="#34495e" stroke-width="2"/>
    <circle cx="50" cy="50" r="15" fill="#1abc9c" stroke="#e67e22" stroke-width="2"/>
  </svg>`,
    4: `<?xml version="1.0" encoding="UTF-8"?>
  <svg id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 3437.29 873.8">
    <defs>
      <style>
        .cls-1 {
          fill: #fff;
        }
      </style>
    </defs>
    <path class="cls-1" d="M2060.26,28.84c1.25-36.67-65.02-37.85-71.54-6.53-8.52,40.95,47.76,30.45,54.57,44.51,10.22,21.12-39.27,26.44-37.13,2.1l-19.91-.08c4.34,46.33,85.65,41.16,77.88-6.91-3.96-24.47-49.8-18.5-54.87-29.07-9.64-20.1,31.04-25.22,34.23-3.88l16.77-.13Z"/>
    <path class="cls-1" d="M2171.74,1.35c-10.21,1.72-21.67,12.51-26.59,21.4-20.75,37.51,6.28,90.18,51.59,77.51,48.81-13.65,43.48-110.47-25-98.91Z"/>
    <path class="cls-1" d="M1182.25,34.84c-3.07-27.48-32.05-36.71-55.98-28.95-29.49,9.57-37.13,53.17-21.7,77.6,19.5,30.87,74.04,26.62,79.67-12.65l-18.66-.1c-7.78,15.98-20.36,23.98-36.31,12.06-26.02-19.43-10.3-75.68,22.47-62.42,6.47,2.62,10.57,13.03,13.84,14.15,4.54,1.55,11.67-.31,16.67.31Z"/>
    <path class="cls-1" d="M1235.26,2.87c-14.54-1.76-32.1,1.3-47,0v93.92h18v-37.97c13.37.18,30.09-3.41,33.55,13.44,3.26,15.91-4.61,27.96,20.45,24.51-4.54-16.7,3.13-33.54-13.96-44.95,25.5-14.09,17.19-45.53-11.04-48.96Z"/>
    <polygon class="cls-1" points="1336.26 2.87 1268.26 2.87 1268.26 96.8 1336.26 96.8 1336.26 80.81 1286.26 80.81 1286.26 54.83 1330.26 54.83 1330.26 38.84 1286.26 38.84 1286.26 18.86 1336.26 18.86 1336.26 2.87"/>
    <polygon class="cls-1" points="1396.03 3.11 1375.23 4.84 1344.26 96.78 1364.06 96.6 1369.48 76.69 1400.98 77.08 1408.46 96.59 1428.25 96.78 1396.03 3.11"/>
    <polygon class="cls-1" points="1492.26 2.87 1416.26 2.87 1416.26 18.86 1444.26 18.86 1444.26 96.8 1464.26 96.8 1464.26 18.86 1492.26 18.86 1492.26 2.87"/>
    <rect class="cls-1" x="1498.26" y="2.87" width="20" height="93.92"/>
    <path class="cls-1" d="M1546.06,3.07l-19.8-.19,30.19,93.71,16.53-.06,33.27-93.63-21.05,1.93-17.97,64.01c-3.72,1.26-4.64-7.81-5.49-10.5-5.7-18.24-11.14-36.71-15.69-55.26Z"/>
    <path class="cls-1" d="M1678.26,2.87h-68v93.92h68v-15.99h-50c1.15-8.29-3.01-19.63,3-25.98h41v-15.99h-44c.74-6.58-2.48-15.23,3-19.98h47V2.87Z"/>
    <polygon class="cls-1" points="1736.26 2.87 1718.26 2.87 1718.26 96.8 1782.26 96.8 1782.26 82.81 1739.26 82.81 1736.26 79.81 1736.26 2.87"/>
    <rect class="cls-1" x="1788.26" y="2.87" width="18" height="93.92"/>
    <polygon class="cls-1" points="1882.26 2.87 1814.26 2.87 1814.26 96.8 1834.26 96.8 1834.26 56.83 1874.26 56.83 1874.26 42.84 1834.26 42.84 1834.26 18.86 1882.26 18.86 1882.26 2.87"/>
    <path class="cls-1" d="M1954.26,2.87h-70v93.92h70v-15.99h-50c1.15-8.29-3.01-19.63,3-25.98h41v-15.99h-44v-19.98h50V2.87Z"/>
    <path class="cls-1" d="M2142.26,2.87h-78v16c1.96,1.97,26.31-3.46,30,2.99v74.94h18V21.86c3.69-6.45,28.04-1.02,30.01-2.99V2.87Z"/>
    <polygon class="cls-1" points="2384.26 2.87 2314.26 2.87 2314.26 96.8 2384.26 96.8 2384.26 80.81 2334.26 80.81 2334.26 54.83 2376.26 54.83 2376.26 38.84 2334.26 38.84 2334.26 18.86 2384.26 18.86 2384.26 2.87"/>
    <path class="cls-1" d="M2291.26,4.87c-15.47-3.1-40.4,2.3-57,0v91.93h20v-37.97c33.09-3.84,32.89,10.35,36.29,37.69l17.71.26c-4.74-15.78,2.47-36.55-16.02-44.94,23.2-5.58,19.99-42.76-.98-46.96Z"/>
    <path class="cls-1" d="M323.54,675.04c12.32,13.14,16.91,45.5,28.37,64.57,54.14,90.13,263.57,121.66,358.79,108.03,60.73-8.7,64.68-42.25,85.05-92.88,33.23-82.58,59.47-174.28,75.87-261.92,14.84-79.33,41.12-241.93,4.27-312.75C814.92,62.88,574.48,3.95,454.62,30.22c-49.53,10.85-74.6,30.48-68.15,85.35.93,7.91,11.43,30.26,2.3,35.19-3.33,1.8-21.93,3.43-27.53,3.97-77.7,7.55-154.14,8.02-231.35,22.63-38.51,7.29-120.3,23.33-128.73,69.22-12.04,65.55,72.53,92.4,121.46,104.64,19.59,4.9,50.33,7.69,67.67,14.32,3.58,1.37,7.93,4.93,9.72,8.28,5.66,10.61,8.41,44.05,12.82,59.13,9.58,32.81,20.65,44.61,39.09,70.86,18.56,26.42,8.25,47.67,12.58,77.36,3.94,27.03,15.63,51.88,33.82,72.12,7.96,8.86,18.35,14.4,25.24,21.75Z"/>
    <path class="cls-1" d="M3216.96,385.27c12.62-11.87,74.62-18.76,95.33-23.66,48.42-11.46,104.81-27.18,122.08-79.86,16.8-51.25-42.38-72.44-81.26-82.88-78.49-21.08-159.53-23.36-239.81-30.16-40.28-3.41-21.2-14.5-13.58-35.49,37.49-103.25-116.21-105.28-178.43-100.35-77.81,6.17-208.69,45.03-264.04,101.87-106.51,109.37-150.78,372.26-162.96,520.62-3.3,40.15-10.71,134.08,7.92,167.91,9.99,18.14,42.68,25.8,62,29.98,101.2,21.86,319.89,11.59,401.01-59.07,28.06-24.44,33.76-43.25,49.34-74.6,14.89-29.96,38.73-35.55,58.74-59.21,25.77-30.46,25.49-53.78,33.91-90.02,7.92-34.12,16.9-30.53,39.09-50.87,22.87-20.95,39.83-44.27,50.05-73.89,5.48-15.89,9.42-49.78,20.63-60.32Z"/>
    <path class="cls-1" d="M1383.84,163.35c-8.15.76-15.99,2.2-22.27,7.7s-8.53,14.6-16.61,19.38c-9.16,5.42-25.45,8.89-36.05,13.94-97.85,46.71-164.8,236.92-40.62,291.06,114.37,49.86,227.03-15.53,266.87-126.94,20.09-56.17,16.71-134.35-36.24-171.45-22.99-16.11-87.67-36.24-115.09-33.69Z"/>
    <path class="cls-1" d="M1881.56,212.02c10.36-11.97,8.42-34.06-5.2-42.37-17.04-.75-34.09-.69-51.19-.83-5.28-.04-10.25-2.28-15.92-2.27-6.45.02-28.28,1.41-33.58,2.61-10.61,2.38-17,18.91-23.47,26.51-4.8,5.64-11.34,10.39-15.9,16.09-12.82,16.04-23.19,35.18-38.04,48.9-.86-19.42,24.51-63.18,22-78.83-3.07-19.17-35.06-11.18-46.93-11.01-18.97.27-42.91-4.22-60.14-2.14-27.04,3.26-21.79,27.4-25.54,46.42-13.74,69.65-44.15,154.83-65.97,223.84-4.77,15.08-29.87,57.94-.52,61.6,21.04,2.62,69.46,2.13,91.75,1.16,21.63-.94,16.96-17.89,21.9-33.65,4.55-14.49,9.52-31.41,14.51-45.45,12.81-36.06,20.32-.67,28.56,15.26,3.5,6.77,8.7,13.01,12.15,19.84,6.69,13.26,9.29,31.23,22.24,41.73l109.05,1.1c16.55.84,21.67-14.04,17.97-28.12-5.64-21.51-28-53.05-38.03-73.9-5.43-11.3-24.14-52.85-22.97-62.73,1.27-10.72,33.36-43.76,41.91-54.19,20.6-25.15,40.81-45.84,61.35-69.59Z"/>
    <path class="cls-1" d="M1044.24,284.61c-10.82,5.42-25.39,7.87-31,20.01-16.87,49.15-29.16,100.11-46.94,148.94-4.29,11.79-17.53,29.01-13.67,41.53,4.06,13.17,37.56,5.09,46.63,5.38,25.41.81,46.92,6.02,73.88,1.88,13.76-2.11,19.27-25.26,23.15-36.82,14.21-42.25,22.7-85.92,35.44-128.45,3.18-10.62,17.13-55.29,25-58.96,22.06-10.27,58,15.96,71.63-12.36,9.51-19.77,12.57-52.44,20.02-74.02-6.07-27.01-39.52-21.44-61.2-21.09-46.76.75-93.03-1.21-140,0-4.73.12-9.11,2.1-13.83,2.16-23.34.33-41.96-6.81-63.79,6.21-11.36,6.77-8.68,17.51-11.87,28.11-3.77,12.53-18.25,50.14-17.39,60.34.65,7.7,7.3,14.65,15.11,15.12,5,.3,10.15-3.56,15.85-3.96,19.73-1.36,41.46.37,62.02-.16,2.25-.06,14.83,1.55,10.98,6.13Z"/>
    <path class="cls-1" d="M2225.66,175.3c-6.1-7.23-26.78-4.21-36.38-4.59-3.88-.15-7.71-2.04-11.94-2.06-17.28-.1-37.05,2.78-54.57,3.59-11.37,4.61-26.99,39.22-34.86,51.1-8.11,12.24-20.01,23.56-26.67,37.29-3.6,2.78-7.11,4.06-9.5-.5-4.41-8.45-10.49-23.29-13.53-32.4-8.25-24.73-1.49-54.14-32.88-57.08-21.33-2-64.81-1.98-86.17-.02-29.52,2.71-15.37,34.93-9.47,53.62,9.15,29.01,20.3,62.89,30.54,91.39,4.6,12.79,19.1,34.27,19.95,46.17.56,7.76-6.75,29.56-9.35,38.31-5.34,17.95-29.27,72.66-26.16,86.91,2.15,9.86,15.61,12.71,24.5,13.52,32.12,2.9,69.41-2.7,102.13-.04,22.39-3.48,18.16-26.67,21.84-42.12,7.52-31.56,15.61-69.76,33.48-96.44,36.39-54.34,86.15-107.22,118.91-164.94,4.07-7.18,6.16-14.54.12-21.71Z"/>
    <path class="cls-1" d="M2347.58,403.88c-19.52,19.44-33.14-2.7-31.3-24.3,2.91-34.12,24.92-99,34.98-134.9,2.95-10.51,19.91-55.87,18.2-61.99-1.04-3.74-7.35-9.92-11.09-11.06-3.48-1.06-20.9-3.03-25.11-3.05-4.71-.03-9.14,2.25-13.92,2.25-17.26-.01-44.12-2.44-59.96.04-3.5.55-13.85,5.42-16.05,7.94-15.89,50.93-28.63,102.52-41.63,154.24-11.92,47.4-33.67,105.01,2.61,148.4,22.9,27.39,78.03,32.32,110.39,22.46,7.41-2.26,22.71-11.33,28.61-11.21,6.37.13,11.86,7.38,16.87,8.87,11.91,3.56,22.68-1.38,33.1-1.27,22.45.25,80.53,14.87,76.96-22.62-.59-6.23-6.88-11.62-8.62-17.51-3.61-12.24,2.83-36.34,5.58-49.69,12.38-60.05,33.92-119.51,46.08-179.77,9.29-18.83,29.03-37.8,4.85-54.82-13.91-9.79-24.48-3.27-38.76-3.04-18.82.29-49.71-9.67-62.01,9.98-6.17,9.84-12.59,45.61-16.52,59.43-2.28,8.02-7.27,15.63-9.63,24.35-9.22,34.17-19.01,112.78-43.61,137.28Z"/>
    <path class="cls-1" d="M2312.74,632.83c15.41-15.26,60.29,17.49,76.15,23.87,10.2,4.11,21.48,9.41,27.86-2.86.62-10.51,3.56-24.48,3.67-34.47.08-7.07-3.24-13.76-3.14-20.01.37-22.52,15.97-29.53-9.98-46.98-47.1-31.67-104.1-39.09-159.12-27-80.78,17.75-105.68,102.85-48.73,162.73,16.28,17.12,38.69,26.55,55.73,42.23,16.23,14.94,12.67,28.66-11.43,25.39-16.5-2.24-61.81-20.34-77.54-28.42-3.07-1.58-16.31-10.04-18.03-11.96-8.24-9.23-1.01-30.7-2.19-43.79-11.37-126.38-132.28-161.89-242.2-138.57-13.96,2.96-45.25,9.52-52.4,21.58-6.75,11.39-7.16,41.92-9.36,56.59-2.98,19.89-19.51,45.33,11.97,47.4,2.96,4.61-5.41,17.61-7.19,23.33-15.35,49.37-29.64,99.08-45.62,148.26-1.49,4.58-5.59,9.08-6.51,13.49-7.22,34.6,43.06,18.54,60.52,18.37,17.06-.17,37.32,10.9,53.1-.77,7.29-5.39,7.62-13.78,14.9-18.47,16.55,7.28,34.38,29.99,53.72,29.25,4.79-.18,14.64-2.99,19.74-4.42,39.81-11.17,78.86-46.25,105.5-76.43,9.92-11.24,15.07-24.56,23.06-36.87,5.97-.36-2.5,23.37-2.59,26.94-.32,11.85,3.45,27.25,1.63,39.93,1.02,5.2,11.35,11.22,16.19,13.8,72.75,38.74,199.8,70.23,250.11-17.42,28.88-50.32,15.45-101.4-28.51-136.06-11.33-8.93-49.2-26.39-51.52-38.61-.56-2.95.07-7.96,2.18-10.05Z"/>
    <path class="cls-1" d="M1119.64,861.57c7.32-8.17,6.85-23.57,9.55-33.43,21.44-78.25,50.2-154.28,71.18-232.63,3.01-11.22,16.35-41.28,12.39-50.54-9.44-22.05-46.32-13-63.43-12.45-23.84.77-47.7-9.61-60.04,17.94-7.1,15.84-9.15,35.37-14.05,51.91s-10.13,51.99-33.66,46.05c-1.7-.36-2.11-2.48-2.38-3.98-2-11.14,20.8-63.42,24.46-79.63,4.4-19.5,4.59-34.06-20.41-34.38-15.42-.2-35.29,4.15-50.09,4.07-19.09-.1-37.69-12.01-49.3,12.52-11.4,24.07-16.11,60.92-25,86.93-10.24,29.98-24.21,11.4-43.71,18.29-7.1,2.51-16.92,12.18-18.53,19.53-.94,4.28,1.26,23.37,1.83,29.32.5,5.28,3.25,10.51,3.78,16.21.91,9.78-1.62,22.43.44,31.53,1.88,8.29,12.87,8.79,13.5,18.51.42,6.5-8.1,34.95-10.48,43.3-3.6,12.59-15.99,31.03-9.92,45.02,7.2,16.6,59.66,12.18,75.57,12.41,19.97.29,31.2,9.61,41-14.82,8.62-21.49,12.28-55.24,23.47-74.47,5.21-8.95,24.11-12.12,22.1,3.91-2.1,16.75-23.34,62-19.26,76.02,4.25,14.64,39.62,5.17,50.6,5.28,16.97.16,57.1,12.41,70.4-2.43Z"/>
    <path class="cls-1" d="M1741.76,863.66c1.32-1.27,12.79-25.55,13.95-29.01,27.8-83.22,46.74-169.23,75.02-252.77,3.31-9.76,10.45-16.81,9.65-28.42-.74-10.62-10.74-21.26-21.25-22.88-7.66-1.18-72.62-1-76.84.9-9.18,4.13-17.44,40.35-21.09,50.87-1.62,4.67-4.74,8.68-6.4,13.59-4.39,13.02-5.12,29.25-13.55,40.38-3.06,0-14.04-33.13-15.56-38.36-5.78-19.9-6.58-61.28-28.94-67.01-15.93-4.08-26.88-.62-41.42-.42-20.39.29-49.38-4.98-64.17,11.82-8.15,9.26-3.69,19.3-5.42,30.55-5.57,36.22-20.48,69.74-30.05,103.87-10.14,36.14-18.18,73.22-28.45,109.47-4.46,15.76-23.55,58.6-17.95,71.9,4.49,10.66,37.38,5.39,48.03,5.95,18.68.99,48.14,12.74,58.5-11.32,8.33-19.34,12.08-45.28,20.06-65.88,2.32-5.99,4.83-16.56,11.33-18.66,5.45-.12,13.93,84.85,26.26,93.71,10.86,7.8,22.58,2.25,33.67,2.14,20.27-.2,45.67,3.81,64.18,2.17,3.23-.29,8.02-.28,10.42-2.59Z"/>
    <path class="cls-1" d="M1381.84,531.03c-15.65.34-47.44-.9-60.49,1.51-4.23.78-7.75,4.45-11.17,6.83-28.09,46.74-50.26,99.43-77.59,146.29-2,3.43-7.12,12.33-9.48,14.51-12.7,11.77-46.94-2.97-50.75,21.24-2.61,16.57.52,38.93-2.92,56.85-4.09,21.31-35.48,63.19-33.22,76.82.44,2.64,2.67,5.89,4.9,7.23,3.01,1.8,26.04,3.66,32.04,3.96,13.85.69,51.46,2.02,63.13-1.03,18.9-4.93,20.26-45.59,41.84-50.12,8.02-1.68,46.32-.1,54.97,1.24,19.23,2.98-.11,33.59,18.13,45.83,10.29,6.91,49.49,3.95,64.08,3.9,10.44-.03,19.75,2.39,31.5-.33,12.33-2.86,14.53-25.67,15.39-36.58,2.2-28.04.31-59.35,1.95-87.98,1.46-25.46,2.7-50.67,4.01-75.95,1.5-28.89,7.07-61.99,7.32-90.18.1-11.13-1.09-23.34-9.17-31.71-18.07-18.73-26.9-10.48-47.07-10.79-12.47-.19-23.71-1.83-37.42-1.54Z"/>
    <path d="M323.54,675.04c-6.89-7.34-17.27-12.89-25.24-21.75-18.2-20.24-29.88-45.09-33.82-72.12-4.32-29.69,5.98-50.94-12.58-77.36-18.44-26.25-29.51-38.04-39.09-70.86-4.4-15.09-7.16-48.53-12.82-59.13-1.79-3.35-6.13-6.91-9.72-8.28-17.34-6.63-48.08-9.42-67.67-14.32-48.94-12.24-133.5-39.09-121.46-104.64,8.43-45.89,90.22-61.93,128.73-69.22,77.21-14.62,153.65-15.08,231.35-22.63,5.6-.54,24.21-2.17,27.53-3.97,9.13-4.93-1.37-27.28-2.3-35.19-6.45-54.87,18.62-74.49,68.15-85.35,119.86-26.27,360.3,32.66,421.28,149.87,36.85,70.83,10.57,233.43-4.27,312.75-16.4,87.64-42.64,179.34-75.87,261.92-20.37,50.62-24.32,84.18-85.05,92.88-95.22,13.64-304.65-17.9-358.79-108.03-11.46-19.08-16.05-51.44-28.37-64.57ZM501.74,49.32c-43.17,6.72-56.83,46.42-35.88,82.85,9.31,16.19,28.1,19.47,45.32,20.67,49.54,3.43,103.62-.54,154.16,1.84,33.23,1.56,69.19,7.79,101.93,8.23,32.92.45,23.51-24.51,4.87-39-54.3-42.23-202.94-85.09-270.39-74.59ZM641.78,536.91c6.73,6.76,1.3,19.3-7.06,22.98-11.14,4.9-56.54,2.93-71.55,2.61-40.51-.86-83.33-3.12-123.63-8.36-23.73-3.09-55.93-13.28-78.4-13.77-31.39-.69-16.11,51.31-7.97,68.1,34.15,70.39,159.16,67.75,226.17,71.77,7.28.44,28.86,1.74,31.91,8.07,8.87,18.4-18.36,21.35-30.02,21.97-36.51,1.96-88.3-4.74-125.96-8-17.16-1.48-44.42-13.39-29.37,19.35,30.88,67.17,175.13,108.2,243.09,102.31,29.79-2.58,36.25-9.15,49.58-34.39,60.4-114.34,110.02-332.74,115.76-461.87,1.17-26.3,2.34-88.92-8.96-111.11-9.39-18.45-47.43-26.58-66.4-29.57-82.15-12.96-178.64-11.74-261.63-10.19-110.55,2.06-232.96,4.3-341.45,24.53-26.38,4.92-85.57,14.28-89.47,46.52-6.34,52.41,87.89,72.97,125.47,80.11,157.6,29.97,304.91,22.48,463.29,16.54,8.27-.31,23.78-2.24,26.65,7.49,4.88,16.55-13.79,20.37-26.78,22.35-31.8,4.86-69.42,3.23-101.77,4.23-67.46,2.08-136.39,4.17-204.1,2.06-13.21-.41-54.26-9.02-62.32.5-14.18,16.76,7.41,61.47,19.45,76.32,52.69,64.97,190.75,70.51,268.98,74.96,13.21.75,58.98-3.07,66.51,4.49Z"/>
    <path d="M3216.96,385.27c-11.21,10.54-15.15,44.43-20.63,60.32-10.21,29.62-27.18,52.94-50.05,73.89-22.19,20.33-31.17,16.75-39.09,50.87-8.41,36.24-8.14,59.55-33.91,90.02-20.01,23.66-43.85,29.25-58.74,59.21-15.58,31.35-21.28,50.16-49.34,74.6-81.13,70.67-299.82,80.93-401.01,59.07-19.32-4.17-52.01-11.84-62-29.98-18.63-33.83-11.21-127.76-7.92-167.91,12.18-148.35,56.45-411.24,162.96-520.62,55.36-56.85,186.23-95.71,264.04-101.87,62.22-4.93,215.92-2.9,178.43,100.35-7.62,20.99-26.7,32.08,13.58,35.49,80.28,6.8,161.32,9.09,239.81,30.16,38.88,10.44,98.06,31.63,81.26,82.88-17.27,52.67-73.66,68.4-122.08,79.86-20.7,4.9-82.7,11.79-95.33,23.66ZM2949.84,55.42c-46.69,2.29-94.55,12.17-138.63,27.35-28.31,9.75-101.76,39.72-108.11,71.89-4.93,24.95,27.72,20.61,44.24,20.16,33.79-.93,67.98-6.63,101.83-8.16,42.49-1.92,88.79,2.03,130.15.15,32.24-1.46,52.6-25.73,55-56.95,4.18-54.4-42.75-56.49-84.48-54.44ZM2720.73,552.89c9.09-9.12,38.38-.83,50.44-.39,62.81,2.32,133.58-1.88,195.45-12.7,65.92-11.53,123.97-35.82,154.38-99.54,6.33-13.27,21.89-45.63-1.71-47.74-106.81,6.34-217.15,19.8-324.03,8.01-12.2-1.35-40.03-2.45-40.11-18.96-.09-18.48,34.75-9.14,46.02-8.92,147.67,2.81,317.03-2.62,461.49-34.64,38.76-8.59,128.89-33.49,106.58-89.33-10.34-25.88-67.26-34.73-92.62-39.35-155.55-28.31-357.61-26.49-515.36-12.61-16.73,1.47-65.83,5.15-78.41,11.58-20.61,10.55-40.49,55.27-49.54,76.4-53.63,125.19-76.03,284.87-83.04,420.61-1.46,28.35-4.13,65.93.46,93.43,3.91,23.43,25.06,29.1,45.11,32.86,83.16,15.58,288.41,2.83,327.87-88.88,7.66-17.81,9.56-25.86-12.43-24.39-61.97,4.14-123.06,14.36-186,9.93-15.29-1.08-43.39-2.05-36.04-23.99,2.69-2.97,6.23-3.58,9.98-4.01,28.42-3.23,64.45,1.26,94.12.12,69.86-2.68,202.82-15.85,230.47-93.45,4.47-12.56,8.92-41.55-10.71-42.36-83.28,10.69-175.85,25.24-259.82,15.8-7.23-.81-27.95-3.68-32.51-8.47-3.39-3.56-3.49-15.55-.04-19.01Z"/>
    <path d="M2312.74,632.83c-2.11,2.09-2.74,7.1-2.18,10.05,2.32,12.22,40.19,29.68,51.52,38.61,43.96,34.66,57.39,85.74,28.51,136.06-50.31,87.66-177.36,56.16-250.11,17.42-4.84-2.58-15.17-8.6-16.19-13.8,1.82-12.68-1.94-28.08-1.63-39.93.1-3.57,8.56-27.3,2.59-26.94-7.99,12.31-13.14,25.63-23.06,36.87-26.64,30.19-65.7,65.26-105.5,76.43-5.1,1.43-14.95,4.24-19.74,4.42-19.34.74-37.17-21.97-53.72-29.25-7.28,4.69-7.61,13.08-14.9,18.47-15.78,11.67-36.04.6-53.1.77-17.46.17-67.74,16.23-60.52-18.37.92-4.41,5.02-8.92,6.51-13.49,15.97-49.18,30.27-98.89,45.62-148.26,1.78-5.72,10.15-18.72,7.19-23.33-31.48-2.07-14.95-27.51-11.97-47.4,2.2-14.67,2.61-45.2,9.36-56.59,7.15-12.06,38.43-18.62,52.4-21.58,109.92-23.31,230.82,12.2,242.2,138.57,1.18,13.09-6.05,34.56,2.19,43.79,1.72,1.92,14.96,10.38,18.03,11.96,15.73,8.08,61.04,26.18,77.54,28.42,24.1,3.27,27.66-10.45,11.43-25.39-17.04-15.68-39.45-25.11-55.73-42.23-56.95-59.88-32.05-144.98,48.73-162.73,55.02-12.09,112.02-4.67,159.12,27,25.95,17.45,10.35,24.46,9.98,46.98-.1,6.25,3.22,12.94,3.14,20.01-.12,9.99-3.05,23.96-3.67,34.47-6.37,12.27-17.66,6.97-27.86,2.86-15.86-6.39-60.74-39.13-76.15-23.87ZM1985.58,749.58c20.35-17.94,33.85-47.34,34.71-74.32,1.24-38.86-45.46-42.71-74.03-34.89-1.09,4.77.86,3.23,2.61,4.43,8.57,5.91,17.17,9.96,17.28,22.37-2.38,16.67-30.98,86.45-27.72,97.82.67,2.35,2.69,3.02,4.89,3.34,8.31,1.22,35.5-12.79,42.26-18.76Z"/>
    <path d="M1119.64,861.57c-13.3,14.84-53.44,2.6-70.4,2.43-10.99-.11-46.35,9.36-50.6-5.28-4.07-14.03,17.16-59.27,19.26-76.02,2.01-16.03-16.89-12.86-22.1-3.91-11.19,19.23-14.85,52.98-23.47,74.47-9.8,24.43-21.03,15.12-41,14.82-15.91-.23-68.37,4.19-75.57-12.41-6.07-13.99,6.33-32.43,9.92-45.02,2.39-8.35,10.9-36.8,10.48-43.3-.63-9.72-11.62-10.22-13.5-18.51-2.06-9.1.47-21.75-.44-31.53-.53-5.69-3.27-10.93-3.78-16.21-.57-5.95-2.77-25.03-1.83-29.32,1.61-7.35,11.43-17.02,18.53-19.53,19.5-6.89,33.47,11.69,43.71-18.29,8.89-26.01,13.6-62.86,25-86.93,11.61-24.53,30.22-12.61,49.3-12.52,14.8.08,34.68-4.27,50.09-4.07,25,.32,24.81,14.88,20.41,34.38-3.66,16.2-26.46,68.49-24.46,79.63.27,1.51.67,3.63,2.38,3.98,23.53,5.93,28.53-28.72,33.66-46.05s6.95-36.07,14.05-51.91c12.35-27.54,36.21-17.17,60.04-17.94,17.11-.55,53.98-9.6,63.43,12.45,3.97,9.26-9.38,39.32-12.39,50.54-20.98,78.35-49.74,154.38-71.18,232.63-2.7,9.85-2.24,25.26-9.55,33.43Z"/>
    <path d="M1741.76,863.66c-2.4,2.31-7.19,2.3-10.42,2.59-18.51,1.64-43.91-2.37-64.18-2.17-11.09.11-22.81,5.66-33.67-2.14-12.33-8.86-20.81-93.83-26.26-93.71-6.5,2.1-9.01,12.66-11.33,18.66-7.98,20.6-11.74,46.55-20.06,65.88-10.36,24.06-39.82,12.31-58.5,11.32-10.65-.56-43.54,4.71-48.03-5.95-5.61-13.3,13.48-56.14,17.95-71.9,10.26-36.24,18.31-73.32,28.45-109.47,9.57-34.12,24.48-67.65,30.05-103.87,1.73-11.26-2.73-21.29,5.42-30.55,14.79-16.8,43.77-11.53,64.17-11.82,14.53-.21,25.49-3.66,41.42.42,22.35,5.73,23.15,47.11,28.94,67.01,1.52,5.23,12.5,38.36,15.56,38.36,8.42-11.13,9.16-27.36,13.55-40.38,1.66-4.92,4.78-8.92,6.4-13.59,3.64-10.52,11.91-46.74,21.09-50.87,4.23-1.9,69.18-2.08,76.84-.9,10.51,1.62,20.52,12.26,21.25,22.88.8,11.61-6.34,18.66-9.65,28.42-28.28,83.54-47.23,169.55-75.02,252.77-1.16,3.46-12.63,27.74-13.95,29.01Z"/>
    <path d="M1881.56,212.02c-20.55,23.74-40.76,44.44-61.35,69.59-8.55,10.43-40.64,43.48-41.91,54.19-1.17,9.89,17.54,51.44,22.97,62.73,10.03,20.85,32.38,52.39,38.03,73.9,3.69,14.08-1.42,28.96-17.97,28.12l-109.05-1.1c-12.95-10.5-15.54-28.48-22.24-41.73-3.44-6.82-8.65-13.07-12.15-19.84-8.24-15.93-15.75-51.32-28.56-15.26-4.99,14.04-9.96,30.96-14.51,45.45-4.95,15.76-.28,32.7-21.9,33.65-22.29.97-70.7,1.46-91.75-1.16-29.35-3.66-4.25-46.52.52-61.6,21.82-69.02,52.24-154.2,65.97-223.84,3.75-19.02-1.5-43.16,25.54-46.42,17.23-2.08,41.17,2.41,60.14,2.14,11.87-.17,43.86-8.17,46.93,11.01,2.5,15.64-22.87,59.4-22,78.83,14.85-13.72,25.22-32.86,38.04-48.9,4.56-5.7,11.1-10.45,15.9-16.09,6.47-7.6,12.85-24.13,23.47-26.51,5.3-1.19,27.13-2.58,33.58-2.61,5.67-.02,10.64,2.22,15.92,2.27,17.1.13,34.15.08,51.19.83,13.62,8.31,15.57,30.4,5.2,42.37Z"/>
    <path d="M2347.58,403.88c24.59-24.5,34.38-103.12,43.61-137.28,2.35-8.72,7.35-16.33,9.63-24.35,3.93-13.82,10.35-49.59,16.52-59.43,12.3-19.65,43.19-9.69,62.01-9.98,14.29-.22,24.86-6.74,38.76,3.04,24.18,17.02,4.44,35.99-4.85,54.82-12.16,60.27-33.7,119.72-46.08,179.77-2.75,13.36-9.19,37.46-5.58,49.69,1.74,5.89,8.02,11.28,8.62,17.51,3.57,37.49-54.5,22.87-76.96,22.62-10.42-.12-21.19,4.83-33.1,1.27-5.01-1.5-10.49-8.74-16.87-8.87-5.9-.12-21.2,8.95-28.61,11.21-32.36,9.86-87.49,4.93-110.39-22.46-36.28-43.39-14.53-101-2.61-148.4,13-51.72,25.75-103.31,41.63-154.24,2.2-2.52,12.56-7.39,16.05-7.94,15.84-2.48,42.71-.05,59.96-.04,4.78,0,9.2-2.27,13.92-2.25,4.22.02,21.63,1.99,25.11,3.05,3.74,1.14,10.05,7.33,11.09,11.06,1.71,6.12-15.25,51.48-18.2,61.99-10.06,35.9-32.07,100.77-34.98,134.9-1.84,21.6,11.78,43.74,31.3,24.3Z"/>
    <path d="M1383.84,163.35c27.42-2.55,92.09,17.58,115.09,33.69,52.95,37.1,56.33,115.28,36.24,171.45-39.85,111.41-152.5,176.8-266.87,126.94-124.18-54.14-57.23-244.35,40.62-291.06,10.59-5.06,26.89-8.52,36.05-13.94,8.07-4.78,10.28-13.84,16.61-19.38s14.12-6.94,22.27-7.7ZM1324.93,407.87c3.23,3.24,9.57,6.14,14.26,6.72,58.19,7.22,105.68-91.26,81.86-137.74-13.2-25.76-18.58-2.29-32.68,4.92-9.46,4.84-20.17,5.08-29.99,12-15.78,11.11-38.68,40.98-41.65,60.3-2.38,15.49-3.55,42,8.19,53.8Z"/>
    <path d="M1381.84,531.03c13.71-.3,24.96,1.34,37.42,1.54,20.17.31,29-7.94,47.07,10.79,8.08,8.37,9.26,20.58,9.17,31.71-.24,28.18-5.82,61.28-7.32,90.18-1.31,25.28-2.55,50.48-4.01,75.95-1.64,28.62.25,59.94-1.95,87.98-.86,10.91-3.06,33.72-15.39,36.58-11.74,2.73-21.06.3-31.5.33-14.59.05-53.79,3-64.08-3.9-18.24-12.24,1.09-42.85-18.13-45.83-8.66-1.34-46.96-2.92-54.97-1.24-21.59,4.53-22.94,45.18-41.84,50.12-11.67,3.05-49.28,1.72-63.13,1.03-6-.3-29.03-2.15-32.04-3.96-2.23-1.33-4.46-4.59-4.9-7.23-2.26-13.63,29.13-55.5,33.22-76.82,3.44-17.92.31-40.28,2.92-56.85,3.81-24.21,38.04-9.47,50.75-21.24,2.36-2.19,7.48-11.08,9.48-14.51,27.33-46.86,49.5-99.55,77.59-146.29,3.42-2.38,6.94-6.05,11.17-6.83,13.05-2.4,44.84-1.17,60.49-1.51ZM1349.45,666.51c-1.99.63-6.21,8.04-7.56,10.45-2.02,3.61-12.21,22.98-12.78,25.26-2.53,10.09,19.85,7.21,23.67-.39,2.67-5.31,5.43-29.24,2.52-33.54l-5.85-1.77Z"/>
    <path d="M2225.66,175.3c6.04,7.16,3.95,14.53-.12,21.71-32.76,57.72-82.53,110.6-118.91,164.94-17.87,26.68-25.96,64.88-33.48,96.44-3.68,15.45.54,38.65-21.84,42.12-32.72-2.66-70.01,2.94-102.13.04-8.89-.8-22.35-3.65-24.5-13.52-3.11-14.26,20.82-68.96,26.16-86.91,2.6-8.75,9.9-30.55,9.35-38.31-.85-11.9-15.35-33.38-19.95-46.17-10.24-28.49-21.39-62.37-30.54-91.39-5.9-18.69-20.04-50.9,9.47-53.62,21.36-1.96,64.84-1.98,86.17.02,31.39,2.94,24.62,32.35,32.88,57.08,3.04,9.1,9.12,23.95,13.53,32.4,2.38,4.57,5.9,3.29,9.5.5,6.66-13.73,18.56-25.05,26.67-37.29,7.87-11.88,23.48-46.49,34.86-51.1,17.52-.81,37.29-3.69,54.57-3.59,4.23.02,8.06,1.91,11.94,2.06,9.6.37,30.28-2.64,36.38,4.59Z"/>
    <path d="M1044.24,284.61c3.85-4.59-8.72-6.19-10.98-6.13-20.56.53-42.29-1.2-62.02.16-5.7.39-10.84,4.26-15.85,3.96-7.81-.47-14.46-7.42-15.11-15.12-.86-10.2,13.63-47.81,17.39-60.34,3.18-10.59.51-21.34,11.87-28.11,21.84-13.01,40.45-5.88,63.79-6.21,4.72-.07,9.1-2.04,13.83-2.16,46.97-1.21,93.24.75,140,0,21.69-.35,55.14-5.92,61.2,21.09-7.45,21.58-10.51,54.25-20.02,74.02-13.63,28.32-49.58,2.08-71.63,12.36-7.87,3.67-21.81,48.33-25,58.96-12.75,42.54-21.23,86.21-35.44,128.45-3.89,11.56-9.39,34.7-23.15,36.82-26.96,4.14-48.47-1.07-73.88-1.88-9.07-.29-42.57,7.79-46.63-5.38-3.86-12.53,9.38-29.74,13.67-41.53,17.78-48.83,30.07-99.79,46.94-148.94,5.61-12.13,20.18-14.59,31-20.01Z"/>
    <path d="M2171.74,1.35c68.48-11.57,73.8,85.26,25,98.91-45.3,12.67-72.34-40-51.59-77.51,4.91-8.88,16.38-19.67,26.59-21.4ZM2177.74,17.33c-29.31,5.05-27.64,73.51,11.4,67.37,28.24-4.44,28.62-74.26-11.4-67.37Z"/>
    <path d="M2291.26,4.87c20.97,4.2,24.18,41.39.98,46.96,18.49,8.39,11.28,29.16,16.02,44.94l-17.71-.26c-3.39-27.34-3.19-41.53-36.29-37.69v37.97h-20V4.87c16.6,2.3,41.53-3.1,57,0ZM2254.25,44.85c11.35-.64,33.14,4.52,35.65-11.42,3.04-19.3-23.96-14.17-35.65-14.58v26Z"/>
    <path d="M1235.26,2.87c28.22,3.42,36.53,34.87,11.04,48.96,17.08,11.41,9.42,28.25,13.96,44.95-25.05,3.45-17.18-8.6-20.45-24.51-3.45-16.85-20.17-13.26-33.55-13.44v37.97h-18V2.87c14.9,1.3,32.46-1.76,47,0ZM1206.25,44.85c9.77-.17,32.09,2.94,35.67-9.45,5.91-20.44-23.89-16.79-35.67-16.55v26Z"/>
    <path d="M2060.26,28.84l-16.77.13c-3.19-21.34-43.87-16.22-34.23,3.88,5.07,10.57,50.91,4.61,54.87,29.07,7.78,48.07-73.54,53.24-77.88,6.91l19.91.08c-2.14,24.34,47.35,19.02,37.13-2.1-6.81-14.06-63.09-3.56-54.57-44.51,6.52-31.31,72.78-30.14,71.54,6.53Z"/>
    <path d="M1954.26,2.87v15.99h-50v19.98h44v15.99h-41c-6.01,6.35-1.85,17.69-3,25.98h50v15.99h-70V2.87h70Z"/>
    <polygon points="2384.26 2.87 2384.26 18.86 2334.26 18.86 2334.26 38.84 2376.26 38.84 2376.26 54.83 2334.26 54.83 2334.26 80.81 2384.26 80.81 2384.26 96.8 2314.26 96.8 2314.26 2.87 2384.26 2.87"/>
    <path d="M1678.26,2.87v15.99h-47c-5.48,4.76-2.26,13.4-3,19.98h44v15.99h-41c-6.01,6.35-1.85,17.69-3,25.98h50v15.99h-68V2.87h68Z"/>
    <polygon points="1336.26 2.87 1336.26 18.86 1286.26 18.86 1286.26 38.84 1330.26 38.84 1330.26 54.83 1286.26 54.83 1286.26 80.81 1336.26 80.81 1336.26 96.8 1268.26 96.8 1268.26 2.87 1336.26 2.87"/>
    <path d="M1182.25,34.84c-5-.63-12.13,1.23-16.67-.31-3.26-1.11-7.37-11.53-13.84-14.15-32.77-13.26-48.49,42.99-22.47,62.42,15.96,11.92,28.53,3.92,36.31-12.06l18.66.1c-5.63,39.27-60.17,43.53-79.67,12.65-15.43-24.43-7.79-68.03,21.7-77.6,23.92-7.76,52.9,1.47,55.98,28.95Z"/>
    <path d="M1396.03,3.11l32.22,93.67-19.79-.19-7.47-19.51-31.51-.39-5.41,19.91-19.8.18,30.96-91.94,20.8-1.73ZM1398.25,62.81c-3.73-12.19-5.77-28.29-13.97-37.95l-10.01,37.96h23.99Z"/>
    <polygon points="1882.26 2.87 1882.26 18.86 1834.26 18.86 1834.26 42.84 1874.26 42.84 1874.26 56.83 1834.26 56.83 1834.26 96.8 1814.26 96.8 1814.26 2.87 1882.26 2.87"/>
    <path d="M1546.06,3.07c4.55,18.56,9.98,37.03,15.69,55.26.84,2.69,1.76,11.76,5.49,10.5l17.97-64.01,21.05-1.93-33.27,93.63-16.53.06-30.19-93.71,19.8.19Z"/>
    <polygon points="1492.26 2.87 1492.26 18.86 1464.26 18.86 1464.26 96.8 1444.26 96.8 1444.26 18.86 1416.26 18.86 1416.26 2.87 1492.26 2.87"/>
    <path d="M2142.26,2.87v16c-1.96,1.97-26.31-3.46-30,2.99v74.94h-18V21.86c-3.69-6.45-28.04-1.02-30.01-2.99V2.87h78.01Z"/>
    <polygon points="1736.26 2.87 1736.26 79.81 1739.26 82.81 1782.26 82.81 1782.26 96.8 1718.26 96.8 1718.26 2.87 1736.26 2.87"/>
    <rect x="1498.26" y="2.87" width="20" height="93.92"/>
    <rect x="1788.26" y="2.87" width="18" height="93.92"/>
    <path class="cls-1" d="M641.78,536.91c-7.53-7.56-53.29-3.73-66.51-4.49-78.23-4.45-216.29-9.99-268.98-74.96-12.04-14.85-33.63-59.55-19.45-76.32,8.05-9.52,49.11-.91,62.32-.5,67.71,2.11,136.65.02,204.1-2.06,32.35-1,69.97.63,101.77-4.23,12.99-1.98,31.66-5.81,26.78-22.35-2.87-9.74-18.39-7.8-26.65-7.49-158.37,5.95-305.69,13.44-463.29-16.54-37.58-7.15-131.8-27.71-125.47-80.11,3.9-32.24,63.09-41.61,89.47-46.52,108.5-20.22,230.91-22.47,341.45-24.53,82.99-1.55,179.48-2.77,261.63,10.19,18.98,2.99,57.01,11.12,66.4,29.57,11.3,22.19,10.13,84.82,8.96,111.11-5.74,129.13-55.35,347.53-115.76,461.87-13.33,25.24-19.79,31.81-49.58,34.39-67.96,5.88-212.21-35.14-243.09-102.31-15.05-32.74,12.21-20.84,29.37-19.35,37.66,3.25,89.45,9.96,125.96,8,11.65-.63,38.89-3.57,30.02-21.97-3.05-6.33-24.63-7.63-31.91-8.07-67.01-4.02-192.02-1.38-226.17-71.77-8.14-16.79-23.42-68.79,7.97-68.1,22.47.49,54.67,10.68,78.4,13.77,40.31,5.24,83.12,7.5,123.63,8.36,15,.32,60.4,2.28,71.55-2.61,8.36-3.68,13.8-16.21,7.06-22.98Z"/>
    <path class="cls-1" d="M501.74,49.32c67.45-10.5,216.08,32.37,270.39,74.59,18.64,14.49,28.06,39.45-4.87,39-32.74-.45-68.7-6.67-101.93-8.23-50.53-2.38-104.62,1.59-154.16-1.84-17.21-1.19-36.01-4.47-45.32-20.67-20.95-36.43-7.29-76.13,35.88-82.85Z"/>
    <path class="cls-1" d="M2720.73,552.89c-3.45,3.46-3.35,15.45.04,19.01,4.56,4.79,25.28,7.66,32.51,8.47,83.97,9.44,176.54-5.11,259.82-15.8,19.63.81,15.19,29.8,10.71,42.36-27.66,77.6-160.62,90.77-230.47,93.45-29.67,1.14-65.7-3.35-94.12-.12-3.75.43-7.3,1.04-9.98,4.01-7.35,21.94,20.75,22.91,36.04,23.99,62.94,4.43,124.04-5.79,186-9.93,21.99-1.47,20.09,6.59,12.43,24.39-39.45,91.72-244.71,104.46-327.87,88.88-20.06-3.76-41.21-9.43-45.11-32.86-4.58-27.5-1.92-65.08-.46-93.43,7.01-135.74,29.41-295.42,83.04-420.61,9.05-21.13,28.93-65.85,49.54-76.4,12.58-6.44,61.68-10.11,78.41-11.58,157.75-13.88,359.8-15.69,515.36,12.61,25.36,4.62,82.28,13.47,92.62,39.35,22.32,55.84-67.82,80.74-106.58,89.33-144.46,32.02-313.83,37.45-461.49,34.64-11.26-.21-46.1-9.56-46.02,8.92.08,16.51,27.91,17.62,40.11,18.96,106.88,11.79,217.22-1.68,324.03-8.01,23.6,2.11,8.04,34.47,1.71,47.74-30.41,63.72-88.47,88.01-154.38,99.54-61.87,10.82-132.64,15.02-195.45,12.7-12.06-.45-41.35-8.73-50.44.39Z"/>
    <path class="cls-1" d="M2949.84,55.42c41.73-2.04,88.66.04,84.48,54.44-2.4,31.22-22.76,55.48-55,56.95-41.37,1.88-87.66-2.07-130.15-.15-33.85,1.53-68.04,7.23-101.83,8.16-16.51.46-49.16,4.8-44.24-20.16,6.35-32.17,79.81-62.14,108.11-71.89,44.07-15.18,91.94-25.06,138.63-27.35Z"/>
    <path class="cls-1" d="M1985.58,749.58c-6.77,5.97-33.96,19.98-42.26,18.76-2.2-.32-4.22-1-4.89-3.34-3.26-11.37,25.34-81.15,27.72-97.82-.11-12.4-8.71-16.46-17.28-22.37-1.75-1.21-3.7.34-2.61-4.43,28.57-7.82,75.27-3.98,74.03,34.89-.86,26.98-14.36,56.38-34.71,74.32Z"/>
    <path class="cls-1" d="M1324.93,407.87c-11.75-11.8-10.57-38.31-8.19-53.8,2.97-19.32,25.87-49.2,41.65-60.3,9.82-6.91,20.53-7.16,29.99-12,14.1-7.2,19.48-30.68,32.68-4.92,23.82,46.48-23.67,144.96-81.86,137.74-4.7-.58-11.04-3.48-14.26-6.72Z"/>
    <path class="cls-1" d="M1349.45,666.51l5.85,1.77c2.91,4.31.16,28.23-2.52,33.54-3.82,7.6-26.2,10.48-23.67.39.57-2.29,10.76-21.65,12.78-25.26,1.35-2.4,5.57-9.82,7.56-10.45Z"/>
    <path class="cls-1" d="M2177.74,17.33c40.01-6.89,39.64,62.94,11.4,67.37-39.04,6.13-40.71-62.33-11.4-67.37Z"/>
    <path class="cls-1" d="M2254.25,44.85v-26c11.7.41,38.69-4.72,35.65,14.58-2.51,15.94-24.3,10.78-35.65,11.42Z"/>
    <path class="cls-1" d="M1206.25,44.85v-26c11.78-.24,41.57-3.89,35.67,16.55-3.58,12.39-25.9,9.28-35.67,9.45Z"/>
    <path class="cls-1" d="M1398.25,62.81h-23.99s10.01-37.95,10.01-37.95c8.2,9.66,10.24,25.77,13.97,37.95Z"/>
  </svg>`,
  };

  function loadPreset(num) {
    if (presets[num]) {
      svgInput.value(presets[num]);
      // Reset title to default when loading preset
      updateCanvasTitle();
      loadSVGFromTextArea();
    }
  }
  
  function handleSVGFileUpload(file) {
    if (file && (file.type === 'image/svg+xml' || file.name.toLowerCase().endsWith('.svg'))) {
      // Read the SVG file content
      const reader = new FileReader();
      reader.onload = function(e) {
        const svgContent = e.target.result;
        // Display the SVG content in the textarea
        svgInput.value(svgContent);
        // Update the title with filename
        updateCanvasTitle(file.name);
        // Automatically load the SVG
        loadSVGFromTextArea();
      };
      reader.readAsText(file);
    } else {
      console.error('Please upload a valid SVG file');
    }
  }
  


function parseCSSStyles(svgDoc) {
    const styles = {};
    const styleElements = svgDoc.querySelectorAll("defs style, style");
    
    styleElements.forEach(styleElement => {
      const cssText = styleElement.textContent || styleElement.innerHTML;
      console.log("Found CSS style element:", cssText.substring(0, 200) + "...");
      
      // Use regex to find CSS rules: selector { properties }
      const ruleRegex = /([^{]+)\{([^}]+)\}/g;
      let match;
      
      while ((match = ruleRegex.exec(cssText)) !== null) {
        const selector = match[1].trim();
        const properties = match[2].trim();
        
        // Parse properties
        const styleObj = {};
        properties.split(';').forEach(prop => {
          const trimmedProp = prop.trim();
          if (trimmedProp) {
            const colonIndex = trimmedProp.indexOf(':');
            if (colonIndex > 0) {
              const property = trimmedProp.substring(0, colonIndex).trim();
              const value = trimmedProp.substring(colonIndex + 1).trim();
              if (property && value) {
                styleObj[property] = value;
              }
            }
          }
        });
        
        if (Object.keys(styleObj).length > 0) {
          styles[selector] = styleObj;
          console.log(`Parsed CSS rule for ${selector}:`, styleObj);
        }
      }
    });
    
    return styles;
  }
  
  function loadSVGFromTextArea() {
    const svgText = svgInput.value().trim();
    if (!svgText) return;
    
    console.log("Loading SVG from textarea:", svgText.substring(0, 200) + "...");
  
    try {
      const parser = new DOMParser();
      const svgDoc = parser.parseFromString(svgText, "image/svg+xml");
      const svgElement = svgDoc.querySelector("svg");
  
      if (!svgElement) {
        console.error("No <svg> element found");
        return;
      }
  
      // Parse CSS styles from <defs><style> section
      const cssStyles = parseCSSStyles(svgDoc);
      console.log("Parsed CSS styles:", cssStyles);
  
      svgParts = [];
      const allElements = svgElement.querySelectorAll("path, circle, rect, line, polyline, polygon, ellipse");
      
      console.log(`Found ${allElements.length} SVG elements:`, Array.from(allElements).map(el => el.tagName.toLowerCase()));
  
      allElements.forEach((element, index) => {
        const part = createSVGPartObject(element, index, cssStyles);
        if (part) {
          svgParts.push(part);
        }
      });
  
      if (svgParts.length > 0) {
        boundingBox = calculateBoundingBoxForParts(svgParts);
        
        // Auto-select the first part (usually Path1) to show part settings
        selectedPartIndices = [0];
        svgParts[0].selected = true;
        updatePartSettings(svgParts[0]);
        
        updateSVGPartsList();
        updateInfoTable();
        redraw();
        console.log(`Loaded ${svgParts.length} SVG parts as objects`);
      }
    } catch (error) {
      console.error("Error loading SVG:", error);
    }
  }
  
  function createSVGPartObject(element, index, cssStyles = {}) {
    let pathData = "";
    let shapeParams = null;
    const tagName = element.tagName.toLowerCase();
    
    console.log(`Creating SVG part object for ${tagName} element:`, element);
  
    // Store original shape parameters and convert to path data
    switch (tagName) {
      case "path":
        pathData = element.getAttribute("d");
        break;
      case "circle":
        const cx = parseFloat(element.getAttribute("cx") || 0);
        const cy = parseFloat(element.getAttribute("cy") || 0);
        const r = parseFloat(element.getAttribute("r") || 0);
        if (r > 0) {
          shapeParams = { cx, cy, r };
          pathData = `M ${cx - r} ${cy} A ${r} ${r} 0 1 1 ${cx + r} ${cy} A ${r} ${r} 0 1 1 ${cx - r} ${cy} Z`;
        }
        break;
      case "rect":
        const x = parseFloat(element.getAttribute("x") || 0);
        const y = parseFloat(element.getAttribute("y") || 0);
        const w = parseFloat(element.getAttribute("width") || 0);
        const h = parseFloat(element.getAttribute("height") || 0);
        if (w > 0 && h > 0) {
          shapeParams = { x, y, w, h };
          pathData = `M ${x} ${y} L ${x + w} ${y} L ${x + w} ${y + h} L ${x} ${y + h} Z`;
        }
        break;
      case "ellipse":
        const ex = parseFloat(element.getAttribute("cx") || 0);
        const ey = parseFloat(element.getAttribute("cy") || 0);
        const rx = parseFloat(element.getAttribute("rx") || 0);
        const ry = parseFloat(element.getAttribute("ry") || 0);
        if (rx > 0 && ry > 0) {
          shapeParams = { cx: ex, cy: ey, rx, ry };
          pathData = `M ${ex - rx} ${ey} A ${rx} ${ry} 0 1 1 ${ex + rx} ${ey} A ${rx} ${ry} 0 1 1 ${ex - rx} ${ey} Z`;
        }
        break;
      case "line":
        const x1 = parseFloat(element.getAttribute("x1") || 0);
        const y1 = parseFloat(element.getAttribute("y1") || 0);
        const x2 = parseFloat(element.getAttribute("x2") || 0);
        const y2 = parseFloat(element.getAttribute("y2") || 0);
        shapeParams = { x1, y1, x2, y2 };
        pathData = `M ${x1} ${y1} L ${x2} ${y2}`;
        break;
      case "polygon":
      case "polyline":
        const points = element.getAttribute("points") || "";
        const coords = points.trim().split(/[\s,]+/).map(parseFloat);
        if (coords.length >= 4) {
          shapeParams = { coords, closed: tagName === "polygon" };
          pathData = `M ${coords[0]} ${coords[1]}`;
          for (let i = 2; i < coords.length; i += 2) {
            pathData += ` L ${coords[i]} ${coords[i + 1]}`;
          }
          if (tagName === "polygon") {
            pathData += " Z";
          }
        }
        break;
    }
  
    if (!pathData) return null;
  
    // Parse SVG attributes for colors with improved handling
    const stroke = element.getAttribute('stroke');
    const fill = element.getAttribute('fill');
    const strokeWidth = parseFloat(element.getAttribute('stroke-width')) || 2;
    
    // Also check for style attribute which might contain fill/stroke
    const styleAttr = element.getAttribute('style');
    let styleFill = null;
    let styleStroke = null;
    let styleStrokeWidth = null;
    
    if (styleAttr) {
      // Parse style attribute for fill, stroke, and stroke-width
      const styleRules = styleAttr.split(';');
      styleRules.forEach(rule => {
        const [property, value] = rule.split(':').map(s => s.trim());
        if (property === 'fill') styleFill = value;
        else if (property === 'stroke') styleStroke = value;
        else if (property === 'stroke-width') styleStrokeWidth = parseFloat(value);
      });
    }
    
    // Check for CSS classes and apply their styles
    let cssFill = null;
    let cssStroke = null;
    let cssStrokeWidth = null;
    
    const classAttr = element.getAttribute('class');
    if (classAttr && cssStyles) {
      const classes = classAttr.split(' ').map(c => c.trim()).filter(c => c);
      classes.forEach(className => {
        const cssRule = cssStyles[`.${className}`];
        if (cssRule) {
          console.log(`Applying CSS rule for class ${className}:`, cssRule);
          if (cssRule.fill) cssFill = cssRule.fill;
          if (cssRule.stroke) cssStroke = cssRule.stroke;
          if (cssRule['stroke-width']) cssStrokeWidth = parseFloat(cssRule['stroke-width']);
        }
      });
    }
    
    // Use CSS values if available, otherwise fall back to style attributes, then direct attributes
    const finalFill = cssFill || fill || styleFill;
    const finalStroke = cssStroke || stroke || styleStroke;
    const finalStrokeWidth = cssStrokeWidth || strokeWidth || styleStrokeWidth || 2;
  
    console.log(`Element ${tagName} color parsing:`, {
      directFill: fill,
      styleFill: styleFill,
      cssFill: cssFill,
      finalFill: finalFill,
      directStroke: stroke,
      styleStroke: styleStroke,
      cssStroke: cssStroke,
      finalStroke: finalStroke,
      classes: element.getAttribute('class'),
      hasFill: finalFill && finalFill !== 'none',
      hasStroke: finalStroke && finalStroke !== 'none'
    });
  
    // Determine default behavior when no colors are specified
    const hasStroke = finalStroke && finalStroke !== 'none';
    const hasFill = finalFill && finalFill !== 'none';
    const hasNoColors = !hasStroke && !hasFill;
  
    // Determine if path should be closed (has Z command)
    const shouldClose = pathData.toLowerCase().includes('z');
  
    // Create structured object
    const partObject = {
      id: `part_${index}`,
      name: `${tagName.charAt(0).toUpperCase() + tagName.slice(1)} ${index + 1}`,
      elementType: tagName,
      pathData: pathData,
      shapeParams: shapeParams,
      closed: shouldClose,
      originalAttributes: {
        stroke: finalStroke,
        fill: finalFill,
        'stroke-width': finalStrokeWidth,
        style: styleAttr,
        class: element.getAttribute('class'),
      },
      strokeSettings: {
        enabled: hasStroke || hasNoColors, // Enable stroke if explicitly set or no colors specified
        color: parseColor(finalStroke) || [128, 128, 128], // Gray default stroke
        weight: finalStrokeWidth,
        mode: "straight",
        stitchLength: 2,
        minStitchLength: 0.5,
        resampleNoise: 0.0,
      },
      fillSettings: {
        enabled: hasFill, // Only enable fill if explicitly set
        color: parseColor(finalFill) || [0, 0, 0], // Black default fill
        mode: "tatami",
        stitchLength: 3,
        minStitchLength: 0.5,
        resampleNoise: 0.0,
        rowSpacing: 0.8,
      },
      visible: true,
      selected: false,
      addToOutline: false,
    };
  
    console.log(`Created part object:`, {
      name: partObject.name,
      fillEnabled: partObject.fillSettings.enabled,
      fillColor: partObject.fillSettings.color,
      strokeEnabled: partObject.strokeSettings.enabled,
      strokeColor: partObject.strokeSettings.color
    });
  
    return partObject;
  }
  
  function parseColor(colorStr) {
    if (!colorStr || colorStr === 'none') return null;
    
    console.log(`Parsing color: "${colorStr}"`);
    
    // Handle hex colors
    if (colorStr.startsWith('#')) {
      const hex = colorStr.slice(1);
      if (hex.length === 3) {
        const result = [
          parseInt(hex[0] + hex[0], 16),
          parseInt(hex[1] + hex[1], 16),
          parseInt(hex[2] + hex[2], 16)
        ];
        console.log(`Parsed 3-digit hex:`, result);
        return result;
      } else if (hex.length === 6) {
        const result = [
          parseInt(hex.slice(0, 2), 16),
          parseInt(hex.slice(2, 4), 16),
          parseInt(hex.slice(4, 6), 16)
        ];
        console.log(`Parsed 6-digit hex:`, result);
        return result;
      }
    }
    
    // Handle RGB colors
    const rgbMatch = colorStr.match(/rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)/);
    if (rgbMatch) {
      const result = [parseInt(rgbMatch[1]), parseInt(rgbMatch[2]), parseInt(rgbMatch[3])];
      console.log(`Parsed RGB:`, result);
      return result;
    }
    
    // Handle RGBA colors (ignore alpha for now)
    const rgbaMatch = colorStr.match(/rgba\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*[\d.]+\s*\)/);
    if (rgbaMatch) {
      const result = [parseInt(rgbaMatch[1]), parseInt(rgbaMatch[2]), parseInt(rgbaMatch[3])];
      console.log(`Parsed RGBA:`, result);
      return result;
    }
    
    // Handle common color names with extended palette
    const colorMap = {
      'black': [0, 0, 0],
      'white': [255, 255, 255],
      'red': [255, 0, 0],
      'green': [0, 255, 0],
      'blue': [0, 0, 255],
      'yellow': [255, 255, 0],
      'cyan': [0, 255, 255],
      'magenta': [255, 0, 255],
      'orange': [255, 165, 0],
      'purple': [128, 0, 128],
      'pink': [255, 192, 203],
      'brown': [165, 42, 42],
      'gray': [128, 128, 128],
      'grey': [128, 128, 128],
      'lime': [0, 255, 0],
      'navy': [0, 0, 128],
      'teal': [0, 128, 128],
      'olive': [128, 128, 0],
      'maroon': [128, 0, 0],
      'fuchsia': [255, 0, 255],
      'aqua': [0, 255, 255]
    };
    
    const result = colorMap[colorStr.toLowerCase()];
    if (result) {
      console.log(`Parsed color name "${colorStr}":`, result);
      return result;
    }
    
    console.log(`Could not parse color: "${colorStr}"`);
    return null;
  }
  
  function getPathPoints(pathData) {
    const points = [];
    // Updated regex to include all SVG path commands
    const commands = pathData.match(/[MmLlHhVvCcSsQqTtAaZz][^MmLlHhVvCcSsQqTtAaZz]*/g);
  
    console.log('Parsing path data:', pathData.substring(0, 100) + '...');
    console.log('Found commands:', commands?.length || 0);
  
    if (commands) {
      let currentX = 0, currentY = 0;
      let lastControlX = 0, lastControlY = 0; // For smooth curve commands
  
      for (let command of commands) {
        const type = command[0];
        // Robust coordinate parsing for SVG paths
        const coordString = command.slice(1).trim();
        const coords = [];
        
        // Use regex to match floating point numbers (including negative)
        const numberRegex = /[+-]?(?:\d+\.?\d*|\.\d+)(?:[eE][+-]?\d+)?/g;
        let match;
        while ((match = numberRegex.exec(coordString)) !== null) {
          const num = parseFloat(match[0]);
          if (!isNaN(num)) {
            coords.push(num);
          }
        }
  
        // Debug coordinate parsing for first few commands
        if (commands.indexOf(command) < 3) {
          console.log(`Command: ${type}, coords:`, coords);
        }
  
        switch (type.toLowerCase()) {
          case "m": // Move to
          case "l": // Line to
            if (coords.length >= 2) {
              currentX = type === type.toUpperCase() ? coords[0] : currentX + coords[0];
              currentY = type === type.toUpperCase() ? coords[1] : currentY + coords[1];
              points.push({ x: currentX, y: currentY });
              
              // Handle additional coordinate pairs for moveto/lineto
              for (let i = 2; i < coords.length; i += 2) {
                if (i + 1 < coords.length) {
                  currentX = type === type.toUpperCase() ? coords[i] : currentX + coords[i];
                  currentY = type === type.toUpperCase() ? coords[i + 1] : currentY + coords[i + 1];
                  points.push({ x: currentX, y: currentY });
                }
              }
            }
            break;
            
          case "h": // Horizontal line to
            if (coords.length >= 1) {
              currentX = type === "H" ? coords[0] : currentX + coords[0];
              points.push({ x: currentX, y: currentY });
            }
            break;
            
          case "v": // Vertical line to
            if (coords.length >= 1) {
              currentY = type === "V" ? coords[0] : currentY + coords[0];
              points.push({ x: currentX, y: currentY });
            }
            break;
            
          case "c": // Cubic Bézier curve
            for (let i = 0; i < coords.length; i += 6) {
              if (i + 5 < coords.length) {
                let cp1x, cp1y, cp2x, cp2y, endX, endY;
                
                if (type === "C") {
                  // Absolute coordinates
                  cp1x = coords[i];
                  cp1y = coords[i + 1];
                  cp2x = coords[i + 2];
                  cp2y = coords[i + 3];
                  endX = coords[i + 4];
                  endY = coords[i + 5];
                } else {
                  // Relative coordinates
                  cp1x = currentX + coords[i];
                  cp1y = currentY + coords[i + 1];
                  cp2x = currentX + coords[i + 2];
                  cp2y = currentY + coords[i + 3];
                  endX = currentX + coords[i + 4];
                  endY = currentY + coords[i + 5];
                }
                
                // Debug first few curve segments
                if (i < 12) {
                  console.log(`Curve ${i/6}: from (${currentX.toFixed(1)}, ${currentY.toFixed(1)}) to (${endX.toFixed(1)}, ${endY.toFixed(1)})`);
                }
                
                // Approximate Bézier curve with multiple points
                const numPoints = 10;
                for (let j = 0; j <= numPoints; j++) {
                  const t = j / numPoints;
                  const x = Math.pow(1-t, 3) * currentX + 3 * Math.pow(1-t, 2) * t * cp1x + 
                           3 * (1-t) * t * t * cp2x + t * t * t * endX;
                  const y = Math.pow(1-t, 3) * currentY + 3 * Math.pow(1-t, 2) * t * cp1y + 
                           3 * (1-t) * t * t * cp2y + t * t * t * endY;
                  points.push({ x: x, y: y });
                }
                
                lastControlX = cp2x;
                lastControlY = cp2y;
                currentX = endX;
                currentY = endY;
              }
            }
            break;
            
          case "s": // Smooth cubic Bézier curve
            for (let i = 0; i < coords.length; i += 4) {
              if (i + 3 < coords.length) {
                // First control point is reflection of last control point
                const cp1x = 2 * currentX - lastControlX;
                const cp1y = 2 * currentY - lastControlY;
                const cp2x = type === "S" ? coords[i] : currentX + coords[i];
                const cp2y = type === "S" ? coords[i + 1] : currentY + coords[i + 1];
                const endX = type === "S" ? coords[i + 2] : currentX + coords[i + 2];
                const endY = type === "S" ? coords[i + 3] : currentY + coords[i + 3];
                
                // Approximate Bézier curve with multiple points
                const numPoints = 10;
                for (let t = 0; t <= 1; t += 1 / numPoints) {
                  const x = Math.pow(1-t, 3) * currentX + 3 * Math.pow(1-t, 2) * t * cp1x + 
                           3 * (1-t) * t * t * cp2x + t * t * t * endX;
                  const y = Math.pow(1-t, 3) * currentY + 3 * Math.pow(1-t, 2) * t * cp1y + 
                           3 * (1-t) * t * t * cp2y + t * t * t * endY;
                  points.push({ x: x, y: y });
                }
                
                lastControlX = cp2x;
                lastControlY = cp2y;
                currentX = endX;
                currentY = endY;
              }
            }
            break;
            
          case "q": // Quadratic Bézier curve
            for (let i = 0; i < coords.length; i += 4) {
              if (i + 3 < coords.length) {
                const cpx = type === "Q" ? coords[i] : currentX + coords[i];
                const cpy = type === "Q" ? coords[i + 1] : currentY + coords[i + 1];
                const endX = type === "Q" ? coords[i + 2] : currentX + coords[i + 2];
                const endY = type === "Q" ? coords[i + 3] : currentY + coords[i + 3];
                
                // Approximate quadratic Bézier curve
                const numPoints = 8;
                for (let t = 0; t <= 1; t += 1 / numPoints) {
                  const x = (1-t) * (1-t) * currentX + 2 * (1-t) * t * cpx + t * t * endX;
                  const y = (1-t) * (1-t) * currentY + 2 * (1-t) * t * cpy + t * t * endY;
                  points.push({ x: x, y: y });
                }
                
                lastControlX = cpx;
                lastControlY = cpy;
                currentX = endX;
                currentY = endY;
              }
            }
            break;
            
          case "a": // Elliptical arc - simplified approximation
            for (let i = 0; i < coords.length; i += 7) {
              if (i + 6 < coords.length) {
                // For now, approximate arc with a straight line
                // Full arc implementation would be quite complex
                const endX = type === "A" ? coords[i + 5] : currentX + coords[i + 5];
                const endY = type === "A" ? coords[i + 6] : currentY + coords[i + 6];
                
                // Simple approximation - draw multiple points along arc
                const numPoints = 15;
                for (let j = 1; j <= numPoints; j++) {
                  const t = j / numPoints;
                  const x = currentX + t * (endX - currentX);
                  const y = currentY + t * (endY - currentY);
                  points.push({ x: x, y: y });
                }
                
                currentX = endX;
                currentY = endY;
              }
            }
            break;
            
          case "z": // Close path
            // Don't add extra points, just note that path is closed
            break;
        }
      }
    }
  
    return points;
  }
  
  function calculateBoundingBoxForParts(parts) {
    if (!parts || parts.length === 0) {
      return { minX: 0, minY: 0, maxX: 100, maxY: 100, width: 100, height: 100 };
    }
  
    let minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity;
  
    for (let part of parts) {
      const points = getPathPoints(part.pathData);
      console.log(`Part ${part.name} has ${points.length} points`);
      
      if (points.length > 0) {
        console.log(`First point: (${points[0].x}, ${points[0].y})`);
        console.log(`Last point: (${points[points.length-1].x}, ${points[points.length-1].y})`);
      }
      
      for (let point of points) {
        if (!isNaN(point.x) && !isNaN(point.y)) {
          minX = Math.min(minX, point.x);
          minY = Math.min(minY, point.y);
          maxX = Math.max(maxX, point.x);
          maxY = Math.max(maxY, point.y);
        }
      }
    }
  
    if (minX !== Infinity && maxX !== -Infinity) {
      const bbox = {
        minX: minX,
        minY: minY,
        maxX: maxX,
        maxY: maxY,
        width: maxX - minX,
        height: maxY - minY,
      };
      
      console.log('Calculated bounding box:', bbox);
      return bbox;
    } else {
      console.warn('No valid points found, using default bounding box');
      return { minX: 0, minY: 0, maxX: 100, maxY: 100, width: 100, height: 100 };
    }
  }
  
  function updateSVGPartsList() {
    const container = select("#svg-parts-list");
    container.html(""); // Clear existing content
    
    if (svgParts.length === 0) {
      const emptyMsg = createDiv("No parts loaded");
      emptyMsg.parent(container);
      emptyMsg.style("color", "#888");
      emptyMsg.style("font-style", "italic");
      return;
    }
  
    // Create horizontal button layout
    const partsContainer = createDiv();
    partsContainer.parent(container);
    partsContainer.class("parts-button-container");
  
    svgParts.forEach((part, index) => {
      const partButton = createButton(part.name);
      partButton.parent(partsContainer);
      
      partButton.class("part-button");
      
      if (part.selected) {
        partButton.addClass("active");
      }
      
      // Add color indicators as borders for all buttons
      let colorIndicators = "";
      if (part.strokeSettings.enabled) {
        colorIndicators += `border-left: 8px solid rgb(${part.strokeSettings.color.join(',')});`;
      }
      if (part.fillSettings.enabled) {
        colorIndicators += `border-right: 8px solid rgb(${part.fillSettings.color.join(',')});`;
      }
      
      if (colorIndicators) {
        partButton.elt.style.cssText += colorIndicators;
      }
      
      partButton.mousePressed((event) => selectPart(index, event));
    });
  }
  
  function selectPart(index, event) {
    if (index < 0 || index >= svgParts.length) return;
    
    const isCtrlOrCmd = event && (event.ctrlKey || event.metaKey || event.shiftKey);
    
    if (isCtrlOrCmd) {
      // Multi-select mode: toggle selection
      const isSelected = selectedPartIndices.includes(index);
      if (isSelected) {
        // Remove from selection
        selectedPartIndices = selectedPartIndices.filter(i => i !== index);
        svgParts[index].selected = false;
      } else {
        // Add to selection
        selectedPartIndices.push(index);
        svgParts[index].selected = true;
      }
    } else {
      // Single select mode: clear all and select this one
      svgParts.forEach(part => part.selected = false);
      selectedPartIndices = [index];
      svgParts[index].selected = true;
    }
    
    // Update UI based on selection
    if (selectedPartIndices.length === 1) {
      // Single selection: show part settings
      updatePartSettings(svgParts[selectedPartIndices[0]]);
    } else if (selectedPartIndices.length > 1) {
      // Multi-selection: show multi-edit settings
      updateMultiPartSettings();
    } else {
      // No selection: clear settings
      updatePartSettings(null);
    }
    
    updateSVGPartsList();
    updateInfoTable();
    redraw();
  }
  
  function selectAllParts() {
    if (svgParts.length === 0) return;
    
    // Select all parts
    selectedPartIndices = svgParts.map((_, index) => index);
    svgParts.forEach(part => part.selected = true);
    
    // Update UI
    if (selectedPartIndices.length > 1) {
      updateMultiPartSettings();
    } else if (selectedPartIndices.length === 1) {
      updatePartSettings(svgParts[selectedPartIndices[0]]);
    }
    
    updateSVGPartsList();
    updateInfoTable();
    redraw();
  }